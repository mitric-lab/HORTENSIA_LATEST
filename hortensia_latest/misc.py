#!/usr/bin/env python3

bohr_to_angs           = 0.529177249
hartree_to_eV          = 27.21138602
hartree_to_wavenumbers = 219474.63
autime2fs              = 0.02418884326505


################################################################################
#                                                                              #
#                              Miscellaneous                                   #
#                                                                              #
################################################################################
import numpy as np
from scipy.special import factorial2

def NrToS(s):
    temp = {
           1: "H",    5: "B",    6: "C",    7: "N",    8: "O",    9: "F",
          14:"Si",   15: "P",   16: "S",   17:"Cl",   35:"Br",
         "H":   1,  "B":   5,  "C":   6,  "N":   7,  "O":   8,  "F":   9,
        "Si":  14,  "P":  15,  "S":  16, "Cl":  17, "Br":  35,
         "h":   1,  "b":   5,  "c":   6,  "n":   7,  "o":   8,  "f":   9,
        "si":  14,  "p":  15,  "s":  16, "cl":  17, "br":  35}
    return temp[s]


def masses(s):
    """
    Returns atomic masses in a.u.
    """

    masses = {
         "H":1837.37449 ,  "B":19703.62788,  "C":21892.71094,  "N":25532.68181,
         "O":29163.55664,  "F":34628.81288, "Si":51196.7756 ,  "P":56872.47   ,
         "S":58447.413  , "Cl":64629.86192, "Br":145656.225 ,  "x":1.000000000,
        "Au":359047.964 , "Ag":196631.6863, "Li":12653.03019, "Na":41907.77622,
        "Mg":44305.40221, "Sc":81949.5903 , "Ti":87256.362  ,  "V":92860.66728,
        "Nb":169357.9289, "Mo":174896.03  ,
        "au":359047.964 ,  "c":21892.71094,  "o":29163.55664, "ag":196631.6863,
         "h":1837.37449 ,  "n":25532.68181, "li":12653.03019, "na":41907.77622,
        "mg":44305.40221, "sc":81949.5903 , "ti":87256.362  , "br":145656.225 ,
         "v":92860.66728, "nb":169357.9289, "si":51196.7756 ,  "f":34628.81288,
         "s":58447.413  , "cl":64629.86192, "mo":174896.03  ,  "p":56872.47   }
    return masses[s]


def normGauss(a,l,m,n):
    return (2./np.pi)**(3./4.) * 2**(l+m+n) * a**((2*(l+m+n)+3.)/4.) \
            / np.sqrt(factorial2(2*l-1) * factorial2(2*m-1) * factorial2(2*n-1))


def powerToHerm(powers):
    """
    Convertes the powers of basis functions from Alexander's formatting to one
    compatible with numpy.polynomial.hermite.hermval
    """
    # powDict works up to f functions
    powDict = {
        (0,0,0):[[1,0,0,0],[1,0,0,0],[1,0,0,0]], # s function
        (1,0,0):[[0,1,0,0],[1,0,0,0],[1,0,0,0]], # p functions
        (0,1,0):[[1,0,0,0],[0,1,0,0],[1,0,0,0]],
        (0,0,1):[[1,0,0,0],[1,0,0,0],[0,1,0,0]],
        (2,0,0):[[0,0,1,0],[1,0,0,0],[1,0,0,0]], # d functions
        (0,2,0):[[1,0,0,0],[0,0,1,0],[1,0,0,0]],
        (0,0,2):[[1,0,0,0],[1,0,0,0],[0,0,1,0]],
        (1,1,0):[[0,1,0,0],[0,1,0,0],[1,0,0,0]],
        (1,0,1):[[0,1,0,0],[1,0,0,0],[0,1,0,0]],
        (0,1,1):[[1,0,0,0],[0,1,0,0],[0,1,0,0]],
        (3,0,0):[[0,0,0,1],[1,0,0,0],[1,0,0,0]], # f functions
        (0,3,0):[[1,0,0,0],[0,0,0,1],[1,0,0,0]],
        (0,0,3):[[1,0,0,0],[1,0,0,0],[0,0,0,1]],
        (2,1,0):[[0,0,1,0],[0,1,0,0],[1,0,0,0]],
        (2,0,1):[[0,0,1,0],[1,0,0,0],[0,1,0,0]],
        (1,2,0):[[0,1,0,0],[0,0,1,0],[1,0,0,0]],
        (1,0,2):[[0,1,0,0],[1,0,0,0],[0,0,1,0]],
        (1,1,1):[[0,1,0,0],[0,1,0,0],[0,1,0,0]],
        (0,2,1):[[1,0,0,0],[0,0,1,0],[0,1,0,0]],
        (0,1,2):[[1,0,0,0],[0,1,0,0],[0,0,1,0]],
        }

    newpow = []
    for i in range(len(powers[0])):
        newpow.append(powDict[tuple(powers[:,i])])
    newpow = np.asarray(newpow)

    return newpow
